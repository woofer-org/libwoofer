# SPDX-License-Identifier: GPL-3.0-or-later
#
# @configure_input@
# Copyright (C) 2022, 2023  Quico Augustijn
#
# This library is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed "as is" in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  If your
# computer no longer boots, divides by 0 or explodes, you are the only
# one responsible.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# version 3 along with this library.  If not, see
# <https://www.gnu.org/licenses/gpl-3.0.html>.

SHELL = /bin/sh

# Variables
NAME = @PACKAGE_NAME@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
VERSION = @PACKAGE_VERSION@
CC = @CC@
AR = @AR@
RANLIB = @RANLIB@
EXE_EXT = @EXEEXT@
OBJ_EXT = @OBJEXT@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
MKDIR_P = @MKDIR_P@
LN_S = @LN_S@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
PKG_CFLAGS += @GLIB_CFLAGS@ @GIO_CFLAGS@ @GOBJECT_CFLAGS@ @GSTREAMER_CFLAGS@
PKG_LIBS += @GLIB_LIBS@ @GIO_LIBS@ @GOBJECT_LIBS@ @GSTREAMER_LIBS@

# Directory variables
builddir = @builddir@
abs_builddir = @abs_builddir@
top_builddir = @top_builddir@
top_build_prefix = @top_build_prefix@
abs_top_builddir = @abs_top_builddir@
srcdir = @srcdir@
abs_srcdir = @abs_srcdir@
top_srcdir = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@

# Common prefix for installation directories
# (following the Makefile Conventions)
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datarootdir = @datarootdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
runstatedir = @runstatedir@
includedir = @includedir@
docdir = @docdir@
infodir = @infodir@
htmldir = @htmldir@
dvidir = @dvidir@
pdfdir = @pdfdir@
psdir = @psdir@
libdir = @libdir@
localedir = @localedir@
mandir = @mandir@

# Build information
TAG = lib$(PACKAGE_TARNAME)
OUT_SHARED ?= $(TAG).so
OUT_STATIC ?= $(TAG).a
DIST_PKG = $(TAG)-$(VERSION)
INC_DIR = $(includedir)/$(PACKAGE_TARNAME)

# Dependencies and targets
PREREQUISITE_LIB = app song player library settings intelligence song_manager \
                   song_metadata remote mpris statistics notifications \
                   file_inspector utils characters dlist memory tweaks \
                   static/gdbus static/gdbus static/mediaplayer2 \
                   static/options static/resources
HEADERS = woofer.h app.h song.h intelligence.h settings.h library.h utils.h \
          authors.h constants.h resources.h
TAR_FILES = AUTHORS BUGS CODE_OF_CONDUCT.md configure configure.ac \
            CONTRIBUTING.md COPYING envsetup.sh INSTALL install-sh \
            Makefile.fallback Makefile.in README.md $(TAG).doap
TAR_DIRS = data doc resources src

# Compiler and linker flags
WARN_FLAGS = -Wall -Wextra -Wno-missing-field-initializers -Wno-unused-parameter
INC_FLAGS = -I$(SRC_DIR)
MACROS = -DG_LOG_DOMAIN=\"$(TAG)\"
DEBUG_FLAGS = -g -ggdb

# Directories used for compilation
BUILD_DIR = build
SRC_DIR = src
DATA_DIR = data

# Final library target
TARGET_SHARED ?= $(BUILD_DIR)/$(OUT_SHARED)
TARGET_STATIC ?= $(BUILD_DIR)/$(OUT_STATIC)

# Sources and targets
OBJS := $(PREREQUISITE_LIB:%=$(BUILD_DIR)/%.$(OBJ_EXT))
SRCS := $(PREREQUISITE_LIB:%=$(SRC_DIR)/%.c)

# Include file location
INC_FILES = $(HEADERS:%=$(SRC_DIR)/%)

# Targets that do not generate any files
.PHONY: all install uninstall resources clean distclean mostlyclean \
        maintainer-clean dist installdirs

# Default target
all: $(TARGET_SHARED) $(TARGET_STATIC)

# Final shared library linkage
$(TARGET_SHARED): $(OBJS)
	@$(MKDIR_P) $(@D)
	$(CC) -shared -o $@ $^ $(LIBS) $(PKG_LIBS) $(CFLAGS) $(LDFLAGS)

# Final static library archive creation
$(TARGET_STATIC): $(OBJS)
	@$(MKDIR_P) $(@D)
	$(AR) $(ARFLAGS) $@ $^
	$(RANLIB) $@

# Library object compilation
$(BUILD_DIR)/%.$(OBJ_EXT): $(SRC_DIR)/%.c $(SRC_DIR)/%.h
	@$(MKDIR_P) $(@D)
	$(CC) $(INC_FLAGS) $(MACROS) -fPIC -c $< -o $@ $(PKG_CFLAGS) $(WARN_FLAGS) $(DEBUG_FLAGS) $(CFLAGS) $(CPPFLAGS)

# Install required files
install:
	$(MAKE) installdirs
	$(INSTALL_DATA) $(TARGET_SHARED) $(DESTDIR)$(libdir)/$(OUT_SHARED)
	$(INSTALL_DATA) $(TARGET_STATIC) $(DESTDIR)$(libdir)/$(OUT_STATIC)
	$(INSTALL_DATA) $(INC_FILES) $(DESTDIR)$(INC_DIR)/

# Uninstall installed files
uninstall:
	-rm -fv $(DESTDIR)$(libdir)/$(OUT_SHARED)
	-rm -fv $(DESTDIR)$(libdir)/$(OUT_STATIC)
	-rm -fv $(DESTDIR)$(INC_DIR)/*

# Recompile resource files
resources: resources/resources.gresource.xml
	glib-compile-resources --sourcedir=resources --generate-source --internal $<
	glib-compile-resources --sourcedir=resources --generate-header --internal $<
	cp -f resources/resources.c src/static/resources.c
	cp -f resources/resources.h src/static/resources.h

# Clean all compiled files
clean:
	@$(MAKE) mostlyclean
	-rm -fv $(TARGET_SHARED) $(TARGET_STATIC)

# Clean all generated and compiled files
distclean:
	@$(MAKE) clean
	-rm -frv autom4te.cache aclocal.m4 config.log config.status Makefile

# Clean temporary files
mostlyclean:
	-rm -fv $(BUILD_DIR)/*.i $(BUILD_DIR)/*.s $(BUILD_DIR)/*.o
	-rm -fv $(BUILD_DIR)/*/*.i $(BUILD_DIR)/*/*.s $(BUILD_DIR)/*/*.o

# Clean almost everything
maintainer-clean:
	@echo 'This command is intended for maintainers to use; it'
	@echo 'deletes files that may need special tools to rebuild.'
	@$(MAKE) distclean
	-rm -fv resources/resources.c resources/resources.h resources.gresource

# Create a distribution tar file
dist: $(TAR_FILES)
	@$(MKDIR_P) $(DIST_PKG)
	cp -dflRux -t $(DIST_PKG) $(TAR_FILES) $(TAR_DIRS)
	tar -c --remove-files --file=$(DIST_PKG).tar $(DIST_PKG)
	gzip -f $(DIST_PKG).tar
	-rm -rf $(DIST_PKG)

# Make sure all installation directories (e.g. $(libdir))
# actually exist by making them if necessary.
installdirs:
	@$(MKDIR_P) $(DESTDIR)$(libdir)
	@$(MKDIR_P) $(DESTDIR)$(INC_DIR)

# Reconfigure Makefile
Makefile:
	./configure
